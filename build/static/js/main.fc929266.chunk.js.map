{"version":3,"sources":["NewTaskForm/NewTaskForm.jsx","Timer/Timer.jsx","Task/Task.jsx","TaskList/TaskList.jsx","TaskFilter/TaskFilter.jsx","Footer/Footer.jsx","App/App.jsx","index.jsx"],"names":["NewTaskForm","state","value","minutes","seconds","setValidStates","event","target","name","setState","Number","isNaN","addTask","this","props","className","onSubmit","preventDefault","tabIndex","placeholder","onChange","type","aria-label","React","Component","defaultProps","Timer","startTimer","stopTimer","onClick","Task","intervalId","timerIsActive","setInterval","timerMinutes","timerSeconds","clearInterval","completeToogler","completeChanged","id","currentTaskDestroyed","taskDestroyed","completed","taskText","taskCreateTime","defaultChecked","formatDistanceToNow","includeSeconds","defaultValue","Date","Math","random","TaskList","todoData","currentFilter","arrTaskList","filter","el","slice","map","element","key","tasksFiltered","TaskFilter","activeButton","changeFilter","textContent","onKeyDown","keyCode","Footer","clearCompleted","uncompletedTasks","App","serverInfo","tasksRemain","forEach","newServerInfo","filterName","min","sec","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc929266.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewTaskForm.css';\n\nclass NewTaskForm extends React.Component {\n  state = {\n    value: '',\n    minutes: '',\n    seconds: '',\n  };\n\n  static defaultProps = {\n    addTask: () => {},\n  };\n\n  static propTypes = {\n    addTask: PropTypes.func,\n  };\n\n  setValidStates = (event) => {\n    if (event.target.name === 'task') {\n      this.setState({ value: event.target.value });\n      // console.dir('task', minutes, seconds)\n    }\n\n    if (event.target.name === 'minutes' && !Number.isNaN(+event.target.value)) {\n      this.setState({ minutes: +event.target.value });\n    }\n\n    if (event.target.name === 'seconds' && !Number.isNaN(+event.target.value) && +event.target.value <= 60) {\n      this.setState({ seconds: +event.target.value });\n    }\n  };\n\n  render() {\n    const { addTask } = this.props;\n    const { value } = this.state;\n    const { minutes } = this.state;\n    const { seconds } = this.state;\n    // console.log(this.state)\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form\n          className=\"new-todo-form\"\n          onSubmit={(event) => {\n            event.preventDefault();\n            if (!value) {\n              return;\n            }\n            addTask(value, minutes, seconds);\n            this.setState({\n              value: '',\n              minutes: '',\n              seconds: '',\n            });\n          }}\n        >\n          <input\n            className=\"new-todo\"\n            name=\"task\"\n            tabIndex={0}\n            placeholder=\"What needs to be done?\"\n            value={value}\n            onChange={this.setValidStates}\n          />\n          <input\n            className=\"new-todo-form__timer\"\n            name=\"minutes\"\n            value={minutes}\n            placeholder=\"Min\"\n            onChange={this.setValidStates}\n          />\n          <input\n            className=\"new-todo-form__timer\"\n            name=\"seconds\"\n            value={seconds}\n            placeholder=\"Sec\"\n            onChange={this.setValidStates}\n          />\n          <button type=\"submit\" aria-label=\"отправить\" />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default NewTaskForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Timer = (props) => {\n  const { minutes } = props;\n  const { seconds } = props;\n  const { startTimer } = props;\n  const { stopTimer } = props;\n\n  // const intervalStartTimer = setInterval(() => {\n  //   startTimer()\n  // }, 1000);\n\n  return (\n    <span className=\"description\">\n      <button className=\"icon icon-play\" aria-label=\"запустить\" type=\"button\" onClick={startTimer} />\n      <button className=\"icon icon-pause\" aria-label=\"остановить\" type=\"button\" onClick={stopTimer} />\n      <span className=\"timer-time\">{`${minutes}:${seconds}`}</span>\n    </span>\n  );\n};\n\nTimer.defaultProps = {\n  minutes: '00',\n  seconds: '00',\n  startTimer: () => {},\n  stopTimer: () => {},\n};\n\nTimer.propTypes = {\n  minutes: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  seconds: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  startTimer: PropTypes.func,\n  stopTimer: PropTypes.func,\n};\n\nexport default Timer;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\n\nimport './Task.css';\n\nimport Timer from '../Timer/Timer';\n\nclass Task extends React.Component {\n  state = {\n    intervalId: 0,\n    timerIsActive: false,\n  };\n\n  static defaultProps = {\n    completed: false,\n    taskText: '',\n    minutes: '',\n    seconds: '',\n    taskCreateTime: new Date(),\n    id: Math.random(),\n    completeChanged: () => {},\n    taskDestroyed: () => {},\n    className: '',\n  };\n\n  static propTypes = {\n    completed: PropTypes.bool,\n    taskText: PropTypes.string,\n    minutes: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    seconds: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    taskCreateTime: PropTypes.objectOf(PropTypes.object),\n    id: PropTypes.number,\n    completeChanged: PropTypes.func,\n    taskDestroyed: PropTypes.func,\n    className: PropTypes.string,\n  };\n\n  componentDidMount() {\n    const { minutes } = this.props;\n    const { seconds } = this.props;\n\n    this.setState({\n      timerMinutes: minutes,\n      timerSeconds: seconds,\n    });\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  startTimer = () => {\n    const { timerIsActive } = this.state;\n\n    if (!timerIsActive) {\n      this.setState((state) => ({\n        intervalId: setInterval(() => {\n          let { timerMinutes } = this.state;\n          let { timerSeconds } = this.state;\n\n          if (timerMinutes) {\n            timerSeconds -= 1;\n            this.setState({ timerSeconds });\n            if (timerSeconds === 0) {\n              timerMinutes -= 1;\n              timerSeconds = 60;\n              this.setState({ timerMinutes, timerSeconds });\n              // eslint-disable-next-line react/no-access-state-in-setstate\n            }\n          } else if (!timerMinutes && timerSeconds !== 0) {\n            timerSeconds -= 1;\n            this.setState({ timerSeconds });\n          } else {\n            // console.log('чистим')\n\n            this.stopTimer();\n          }\n          // console.log('tick')\n        }, 1000),\n        timerIsActive: !state.timerIsActive,\n      }));\n    }\n  };\n\n  stopTimer = () => {\n    const { intervalId } = this.state;\n\n    clearInterval(intervalId);\n\n    this.setState((state) => ({\n      timerIsActive: !state.timerIsActive,\n    }));\n  };\n\n  completeToogler = () => {\n    const { completeChanged } = this.props;\n    const { id } = this.props;\n\n    completeChanged(id);\n  };\n\n  currentTaskDestroyed = () => {\n    const { id } = this.props;\n    const { taskDestroyed } = this.props;\n\n    taskDestroyed(id);\n  };\n\n  render() {\n    const { completed } = this.props;\n    const { taskText } = this.props;\n    const { minutes } = this.props;\n    const { seconds } = this.props;\n    const { taskCreateTime } = this.props;\n    const { className } = this.props;\n\n    const { timerMinutes } = this.state;\n    const { timerSeconds } = this.state;\n\n    // console.log(completed);\n    // console.log(this.props);\n    return (\n      <li className={completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" onClick={this.completeToogler} defaultChecked={completed} />\n          <label>\n            <span className=\"title\">{taskText}</span>\n            {minutes || seconds ? (\n              <Timer\n                minutes={timerMinutes}\n                seconds={timerSeconds}\n                startTimer={this.startTimer}\n                stopTimer={this.stopTimer}\n              />\n            ) : null}\n            <span className=\"created\">created {formatDistanceToNow(taskCreateTime, { includeSeconds: true })} ago</span>\n          </label>\n          <button className=\"icon icon-edit\" type=\"button\" aria-label=\"Редактировать\" />\n          <button\n            className=\"icon icon-destroy\"\n            onClick={this.currentTaskDestroyed}\n            type=\"button\"\n            aria-label=\"Удалить\"\n          />\n        </div>\n        {className === 'editing' ? <input type=\"text\" className=\"edit\" defaultValue=\"Editing task\" /> : null}\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\n\nimport './TaskList.css';\n\nimport Task from '../Task/Task';\n\nconst TaskList = ({ todoData, completeChanged, taskDestroyed, currentFilter }) => {\n  const tasksFiltered = () => {\n    let arrTaskList;\n\n    if (currentFilter === 'Active') {\n      arrTaskList = todoData.filter((el) => el.completed === false);\n    }\n\n    if (currentFilter === 'Completed') {\n      arrTaskList = todoData.filter((el) => el.completed === true);\n    } else if (currentFilter === 'All') {\n      arrTaskList = todoData.slice();\n    }\n\n    arrTaskList = arrTaskList.map((element) => (\n      <Task {...element} key={element.id} completeChanged={completeChanged} taskDestroyed={taskDestroyed} />\n    ));\n\n    // console.log(currentFilter, arrTaskList, todoData);\n    return arrTaskList;\n  };\n\n  return <ul className=\"todo-list\">{tasksFiltered()}</ul>;\n};\n\nTaskList.defaultProps = {\n  todoData: [{}],\n  completeChanged: () => {},\n  taskDestroyed: () => {},\n  currentFilter: 'All',\n};\n\nTaskList.propTypes = {\n  todoData: PropTypes.arrayOf(PropTypes.object),\n  completeChanged: PropTypes.func,\n  taskDestroyed: PropTypes.func,\n  currentFilter: PropTypes.string,\n};\n\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './TaskFilter.css';\n\nclass TaskFilter extends React.Component {\n  state = {\n    activeButton: 'All',\n  };\n\n  static defaultProps = {\n    changeFilter: () => {},\n  };\n\n  static propTypes = {\n    changeFilter: PropTypes.func,\n  };\n\n  render() {\n    const { changeFilter } = this.props;\n    const { activeButton } = this.state;\n    return (\n      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n      <ul\n        className=\"filters\"\n        onClick={(event) => {\n          changeFilter(event.target.textContent);\n          this.setState({\n            activeButton: event.target.textContent,\n          });\n        }}\n        onKeyDown={(event) => {\n          if (event.keyCode === 13) {\n            changeFilter(event.target.textContent);\n            this.setState({\n              activeButton: event.target.textContent,\n            });\n          }\n        }}\n      >\n        <li>\n          <button className={activeButton === 'All' ? 'selected' : null} type=\"button\">\n            All\n          </button>\n        </li>\n        <li>\n          <button className={activeButton === 'Active' ? 'selected' : null} type=\"button\">\n            Active\n          </button>\n        </li>\n        <li>\n          <button className={activeButton === 'Completed' ? 'selected' : null} type=\"button\">\n            Completed\n          </button>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default TaskFilter;\n","import React from 'react';\n// import ReactDOM from \"react-dom\";\nimport PropTypes from 'prop-types';\n\nimport TaskFilter from '../TaskFilter/TaskFilter';\n\nimport './Footer.css';\n\nconst Footer = (props) => {\n  const { changeFilter } = props;\n  const { clearCompleted } = props;\n  const { uncompletedTasks } = props;\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{uncompletedTasks()} items left</span>\n      <TaskFilter changeFilter={changeFilter} />\n      <button className=\"clear-completed\" onClick={clearCompleted} type=\"button\">\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  changeFilter: () => {},\n  clearCompleted: () => {},\n  uncompletedTasks: () => {},\n};\n\nFooter.propTypes = {\n  changeFilter: PropTypes.func,\n  clearCompleted: PropTypes.func,\n  uncompletedTasks: PropTypes.func,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport './App.css';\n\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    serverInfo: [],\n    currentFilter: 'All',\n  };\n\n  uncompletedTasks = () => {\n    const { serverInfo } = this.state;\n\n    let tasksRemain = 0;\n\n    serverInfo.forEach((el) => {\n      if (el.completed === false) {\n        tasksRemain += 1;\n      }\n    });\n    return tasksRemain;\n  };\n\n  clearCompleted = () => {\n    const { serverInfo } = this.state;\n\n    const newServerInfo = serverInfo.filter((el) => el.completed === false);\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  changeFilter = (filterName) => {\n    // console.log(filterName);\n\n    this.setState({ currentFilter: filterName });\n    // console.log(this.state);\n  };\n\n  addTask = (taskText, min, sec) => {\n    const { serverInfo } = this.state;\n\n    const newServerInfo = [...serverInfo];\n\n    newServerInfo.push({\n      id: Math.random(),\n      completed: false,\n      taskText,\n      taskCreateTime: new Date(),\n      minutes: min,\n      seconds: sec,\n    });\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  completeChanged = (id) => {\n    let { serverInfo } = this.state;\n    serverInfo = [...serverInfo];\n\n    const newServerInfo = serverInfo.map((el) => {\n      const element = el;\n      if (el.id === id) {\n        element.completed = !element.completed;\n      }\n      return element;\n    });\n    // console.log(\"меняем на completed\");\n    // console.log(newServerInfo);\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  taskDestroyed = (id) => {\n    let { serverInfo } = this.state;\n    serverInfo = [...serverInfo];\n\n    const newServerInfo = serverInfo.filter((el) => el.id !== id);\n\n    this.setState({ serverInfo: newServerInfo });\n  };\n\n  render() {\n    const { serverInfo } = this.state;\n    const { currentFilter } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <NewTaskForm addTask={this.addTask} />\n        <TaskList\n          todoData={serverInfo}\n          completeChanged={this.completeChanged}\n          taskDestroyed={this.taskDestroyed}\n          currentFilter={currentFilter}\n        />\n        <Footer\n          changeFilter={this.changeFilter}\n          clearCompleted={this.clearCompleted}\n          uncompletedTasks={this.uncompletedTasks}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}